#!/usr/bin/env node
// Copyright 2014, Yahoo! Inc.
// Copyrights licensed under the Mit License. See the accompanying LICENSE file for terms.

var PreceptorManager = require('../');
var path = require('path');
var _ = require('underscore');
var utils = require('preceptor-core').utils;

var logger = PreceptorManager.log.getLogger(__filename);

Error.stackTraceLimit = Infinity;

process.on('uncaughtException', function (err) {
	logger.fatal("Uncaught exception:", err.stack);
});

var manager = new PreceptorManager(parseArgs(process.argv));
manager.run().then(function () {
	logger.trace("Exit with success.");
	process.exit(0);

}, function (err) {
	logger.error(err.stack);
	process.exit(1);
});


/**
 * Prints the help info
 *
 * @method printHelp
 */
function printHelp () {
	logger.trace("Print help");
	console.log("Usage: preceptor [<options>] [<config-path>]");
	console.log("");
	console.log("  Runs tests defined in the config.");
	console.log("");
	console.log("  Options:");
	console.log("    --config <json>     Inline configuration in JSON");
	console.log("    --profile <p>       Profile of configuration");
	console.log("    --subprofile <p>    Sub-profile of configuration");
	console.log("    --log-level <l>     Log-level (ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF) (default: INFO)");
	console.log("    --version           Print version");
	console.log("    --help              This help");
	console.log("");
}

	/**
 * Parses the arguments and returns the configuration
 *
 * @method parseArgs
 * @param {string[]} argv
 * @return {object}
 */
function parseArgs (argv) {

	var i, argLength = argv.length,
		config,
		configLine, configFile,
		profile, subProfile;

	logger.trace("Parse arguments:", argv);

	if (argLength <= 1) {
		printHelp();
		process.exit(1);
	}

	for (i = 2; i < argLength; i++) {

		logger.trace("Parse argument number:", i);
		try {

			if (argv[i] == "--help") {
				printHelp();
				process.exit(0);

			} else if (argv[i] == "--log-level") {
				i++;
				PreceptorManager.log.setLevel(argv[i]);
				PreceptorManager.log.flush();

			} else if (argv[i] == "--version") {
				console.log("Preceptor " + PreceptorManager.version);

			} else if (argv[i] == "--config") {
				i++;
				logger.debug("Parse JSON:", argv[i]);
				configLine = JSON.parse(argv[i]);

			} else if (argv[i] == "--profile") {
				i++;
				profile = argv[i];

			} else if (argv[i] == "-p") {
				i++;
				profile = argv[i];

			} else if (argv[i] == "--subprofile") {
				i++;
				subProfile = argv[i];

			} else if (argv[i] == "-s") {
				i++;
				subProfile = argv[i];

			} else if (!configFile) {

				// Get path
				if (argv[i].substr(0, 1) == '/') {
					configFile = path.resolve(argv[i]);
				} else {
					configFile = path.resolve(path.join(process.cwd(), argv[i]));
				}

			} else {
				logger.warn('Parameter ignored - unknown:', argv[i]);
			}

		} catch (exception) {
			var reason = (exception.message !== '') ? "; " + exception.message : '';
			throw new Error("Invalid argument '" + argv[i] + "' for " + argv[i - 1] + reason);
		}
	}
	logger.trace("Done parsing arguments.");

	if (!configFile) {
		logger.info("Resolve default config file in folder: ", process.cwd());
		configFile = path.resolve(path.join(process.cwd(), 'rule-book'));
	}

	logger.debug("Load config file: ", configFile);
	configFile = require(configFile);
	if (_.isFunction(configFile)) {
		logger.trace("Config is a function - evaluate.");
		configFile = configFile();
	}

	logger.trace("Loaded config: ", configFile);
	config = utils.deepExtend({}, [configFile || {}]);

	// Profile
	if (profile) {
		logger.info("Selected profile: ", profile);
		if (config[profile]) {
			config = config[profile];
		} else {
			throw new Error('Could not find profile "' + profile + '"');
		}
	}

	// Sub-Profile
	if (subProfile) {
		logger.info("Selected sub-profile: ", subProfile);
		if (config.tasks[subProfile]) {
			config.tasks = config.tasks[subProfile];
		} else {
			throw new Error('Could not find sub-profile "' + subProfile + '"');
		}
	}

	logger.trace("Merging config.");
	config = utils.deepExtend({}, [config, configLine || {}]);

	logger.debug("Loaded configuration: ", config);
	return config;
}

